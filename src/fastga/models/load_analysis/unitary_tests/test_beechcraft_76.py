"""
Test load_analysis module
"""
#  This file is part of FAST : A framework for rapid Overall Aircraft Design
#  Copyright (C) 2020  ONERA & ISAE-SUPAERO
#  FAST is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import numpy as np
import pytest


from ..wing.aerostructural_loads import AerostructuralLoad
from ..wing.structural_loads import StructuralLoads
from ..wing.aerodynamic_loads import AerodynamicLoads

from tests.testing_utilities import run_system, get_indep_var_comp, list_inputs


XML_FILE = "beechcraft_76.xml"


def test_compute_shear_stress():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerostructuralLoad()), __file__, XML_FILE)
    cl_vector_only_prop = [
        0.04,
        0.13,
        0.21,
        0.3,
        0.39,
        0.47,
        0.56,
        0.68,
        0.84,
        1.01,
        1.17,
        1.34,
        1.51,
        1.67,
        1.84,
        2.01,
        2.18,
        2.35,
        2.51,
        2.68,
        2.85,
        3.02,
        3.19,
        3.35,
        3.52,
        3.68,
        3.85,
        4.01,
        4.18,
        4.34,
        4.5,
        4.66,
        4.81,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        1.43,
        1.42,
        1.42,
        1.42,
        1.42,
        1.41,
        1.42,
        1.41,
        1.4,
        1.4,
        1.41,
        1.4,
        1.4,
        1.46,
        1.5,
        1.38,
        1.35,
        1.36,
        1.35,
        1.34,
        1.33,
        1.32,
        1.31,
        1.3,
        1.28,
        1.26,
        1.24,
        1.21,
        1.19,
        1.16,
        1.13,
        1.09,
        1.05,
        1.01,
        0.95,
        0.88,
        0.79,
        0.67,
        0.63,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.3111, units="m/s"
    )

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerostructuralLoad(), ivc)
    shear_max_mass_condition = problem.get_val("data:loads:max_shear:mass", units="kg")
    assert shear_max_mass_condition == pytest.approx(1747.3, abs=1e-1)
    shear_max_lf_condition = problem.get_val("data:loads:max_shear:load_factor")
    assert shear_max_lf_condition == pytest.approx(3.8, abs=1e-2)
    lift_shear_diagram = problem.get_val("data:loads:max_shear:lift_shear", units="N")
    lift_root_shear = lift_shear_diagram[0]
    assert lift_root_shear == pytest.approx(147551.45, abs=1)
    weight_shear_diagram = problem.get_val("data:loads:max_shear:weight_shear", units="N")
    weight_root_shear = weight_shear_diagram[0]
    assert weight_root_shear == pytest.approx(-21398.3, abs=1)


def test_compute_root_bending_moment():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerostructuralLoad()), __file__, XML_FILE)
    cl_vector_only_prop = [
        0.04,
        0.13,
        0.21,
        0.3,
        0.39,
        0.47,
        0.56,
        0.68,
        0.84,
        1.01,
        1.17,
        1.34,
        1.51,
        1.67,
        1.84,
        2.01,
        2.18,
        2.35,
        2.51,
        2.68,
        2.85,
        3.02,
        3.19,
        3.35,
        3.52,
        3.68,
        3.85,
        4.01,
        4.18,
        4.34,
        4.5,
        4.66,
        4.81,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        1.43,
        1.42,
        1.42,
        1.42,
        1.42,
        1.41,
        1.42,
        1.41,
        1.4,
        1.4,
        1.41,
        1.4,
        1.4,
        1.46,
        1.5,
        1.38,
        1.35,
        1.36,
        1.35,
        1.34,
        1.33,
        1.32,
        1.31,
        1.3,
        1.28,
        1.26,
        1.24,
        1.21,
        1.19,
        1.16,
        1.13,
        1.09,
        1.05,
        1.01,
        0.95,
        0.88,
        0.79,
        0.67,
        0.63,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.3111, units="m/s"
    )

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerostructuralLoad(), ivc)
    max_rbm_mass_condition = problem.get_val("data:loads:max_rbm:mass", units="kg")
    assert max_rbm_mass_condition == pytest.approx(1568.4, abs=1e-1)
    max_rbm_lf_condition = problem.get_val("data:loads:max_rbm:load_factor")
    assert max_rbm_lf_condition == pytest.approx(3.8, abs=1e-2)
    lift_rbm_diagram = problem.get_val("data:loads:max_rbm:lift_rbm", units="N*m")
    lift_rbm = lift_rbm_diagram[0]
    assert lift_rbm == pytest.approx(391838, abs=1)
    weight_rbm_diagram = problem.get_val("data:loads:max_rbm:weight_rbm", units="N*m")
    weight_rbm = weight_rbm_diagram[0]
    assert weight_rbm == pytest.approx(-34939, abs=1)


def test_compute_mass_distribution():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    load_factor_shear = 4.0
    ivc.add_output("data:loads:max_shear:load_factor", load_factor_shear)
    load_factor_rbm = 4.0
    ivc.add_output("data:loads:max_rbm:load_factor", load_factor_rbm)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:point_mass", units="N/m"
    )
    point_mass_result = np.array(
        [
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -24551.9,
            -24551.9,
            -24551.9,
            -24551.9,
            -24551.9,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -145568.2,
            -145568.2,
            -145568.2,
            -145568.2,
            -145568.2,
            -145568.2,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:wing", units="N/m"
    )
    wing_mass_result = np.array(
        [
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            -592.6,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )

    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:fuel", units="N/m"
    )
    fuel_mass_result = np.array(
        [
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -1738.3787633,
            -1718.91330798,
            -1699.46185435,
            -1680.03218112,
            -1660.63828997,
            -1641.29107112,
            -1622.00452623,
            -1602.78798978,
            -1583.6539077,
            -1564.61472594,
            -1545.67977896,
            -1526.85995695,
            -1508.16615011,
            -1489.6108044,
            -1471.20014277,
            -1452.94661118,
            -1434.85798834,
            -1416.94516445,
            -1399.21280674,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_structure_shear():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val("data:loads:structure:ultimate:shear:point_mass", units="N")
    point_mass_result = np.array(
        [
            -8067.5,
            -8067.5,
            -8067.5,
            -8067.5,
            -8067.5,
            -8067.5,
            -8067.5,
            -8067.5,
            -8067.5,
            -8055.3,
            -7770.3,
            -7485.4,
            -7200.4,
            -6915.5,
            -6903.2,
            -6903.2,
            -6903.2,
            -6903.2,
            -6903.2,
            -6903.2,
            -6903.2,
            -6903.2,
            -6903.2,
            -6830.4,
            -5141.0,
            -3451.6,
            -2708.3,
            -1762.2,
            -72.8,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val("data:loads:structure:ultimate:shear:wing", units="N")
    wing_mass_result = np.array(
        [
            -3438.9,
            -3406.0,
            -3340.1,
            -3274.3,
            -3208.4,
            -3142.5,
            -3076.6,
            -3010.8,
            -2984.3,
            -2983.7,
            -2976.9,
            -2970.0,
            -2963.1,
            -2956.2,
            -2955.6,
            -2931.2,
            -2837.5,
            -2743.4,
            -2648.8,
            -2553.7,
            -2458.3,
            -2362.6,
            -2284.0,
            -2283.4,
            -2276.6,
            -2269.7,
            -2266.7,
            -2262.8,
            -2255.9,
            -2255.3,
            -2170.5,
            -2074.3,
            -1978.0,
            -1881.6,
            -1785.4,
            -1689.2,
            -1593.3,
            -1497.5,
            -1402.1,
            -1307.0,
            -1212.3,
            -1118.1,
            -1024.4,
            -931.2,
            -838.7,
            -746.9,
            -655.8,
            -565.5,
            -476.0,
            -387.3,
            -299.6,
            -212.8,
            -126.9,
            -42.1,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val("data:loads:structure:ultimate:shear:fuel", units="N")
    fuel_mass_result = np.array(
        [
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4686.77563342,
            -4545.51783515,
            -4264.539056,
            -3986.92294206,
            -3712.77179638,
            -3442.26917627,
            -3175.54695047,
            -2912.77214002,
            -2654.04036052,
            -2399.48249508,
            -2149.22162704,
            -1903.3329724,
            -1661.90593558,
            -1425.02338744,
            -1192.78112633,
            -965.19124047,
            -742.33800144,
            -524.24275921,
            -310.95963921,
            -102.46428579,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_structure_bending():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:point_mass", units="N*m"
    )
    point_mass_result = np.array(
        [
            -14541.1,
            -14092.7,
            -13196.0,
            -12299.4,
            -11402.7,
            -10506.0,
            -9609.4,
            -8712.7,
            -8352.6,
            -8344.5,
            -8252.7,
            -8164.2,
            -8078.9,
            -7997.0,
            -7990.1,
            -7705.2,
            -6614.6,
            -5517.8,
            -4415.5,
            -3308.4,
            -2197.1,
            -1082.3,
            -167.1,
            -160.2,
            -90.8,
            -40.9,
            -25.2,
            -10.6,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:wing", units="N*m"
    )
    wing_mass_result = np.array(
        [
            -9977.7,
            -9787.5,
            -9412.6,
            -9045.1,
            -8684.8,
            -8331.8,
            -7986.2,
            -7647.9,
            -7514.1,
            -7511.1,
            -7476.6,
            -7442.1,
            -7407.6,
            -7373.3,
            -7370.3,
            -7248.8,
            -6793.1,
            -6349.8,
            -5919.3,
            -5502.1,
            -5098.7,
            -4709.4,
            -4401.4,
            -4399.1,
            -4372.7,
            -4346.3,
            -4334.7,
            -4320.0,
            -4293.8,
            -4291.5,
            -3974.9,
            -3630.1,
            -3300.8,
            -2987.2,
            -2689.4,
            -2407.5,
            -2141.7,
            -1892.0,
            -1658.5,
            -1441.2,
            -1239.9,
            -1054.7,
            -885.3,
            -731.7,
            -593.5,
            -470.7,
            -362.8,
            -269.8,
            -191.1,
            -126.6,
            -75.7,
            -38.2,
            -13.6,
            -1.5,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:fuel", units="N*m"
    )
    fuel_mass_result = np.array(
        [
            -17907.66884523,
            -17647.20007804,
            -17126.26254366,
            -16605.38589492,
            -16084.44836054,
            -15563.51082615,
            -15042.63417741,
            -14521.69664303,
            -14312.49619165,
            -14307.80941602,
            -14253.41635126,
            -14199.0232865,
            -14144.63022174,
            -14090.23715699,
            -14085.55038135,
            -13892.07824156,
            -13151.64797559,
            -12407.01660048,
            -11658.67120133,
            -10907.03797764,
            -10152.54312887,
            -9395.67374015,
            -8774.32074148,
            -8769.63396585,
            -8715.24090109,
            -8660.84783633,
            -8636.9168966,
            -8606.45477157,
            -8552.06170682,
            -8547.37493118,
            -7876.69879769,
            -7115.4456429,
            -6353.76628863,
            -5637.88967925,
            -4967.89292555,
            -4343.40653731,
            -3764.17175289,
            -3229.72609568,
            -2739.5931156,
            -2293.07992472,
            -1889.48716502,
            -1528.02376529,
            -1207.76177113,
            -927.73673605,
            -686.91704089,
            -484.22317874,
            -318.454201,
            -188.42707268,
            -92.87445219,
            -30.51080619,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_lift_distribution():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerodynamicLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_shear:mass", 1747.0, units="kg")
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:mass", 1568.0, units="kg")
    cl_vector_only_prop = [
        0.04,
        0.13,
        0.21,
        0.3,
        0.39,
        0.47,
        0.56,
        0.68,
        0.84,
        1.01,
        1.17,
        1.34,
        1.51,
        1.67,
        1.84,
        2.01,
        2.18,
        2.35,
        2.51,
        2.68,
        2.85,
        3.02,
        3.19,
        3.35,
        3.52,
        3.68,
        3.85,
        4.01,
        4.18,
        4.34,
        4.5,
        4.66,
        4.81,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        1.43,
        1.42,
        1.42,
        1.42,
        1.42,
        1.41,
        1.42,
        1.41,
        1.4,
        1.4,
        1.41,
        1.4,
        1.4,
        1.46,
        1.5,
        1.38,
        1.35,
        1.36,
        1.35,
        1.34,
        1.33,
        1.32,
        1.31,
        1.3,
        1.28,
        1.26,
        1.24,
        1.21,
        1.19,
        1.16,
        1.13,
        1.09,
        1.05,
        1.01,
        0.95,
        0.88,
        0.79,
        0.67,
        0.63,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.3111, units="m/s"
    )

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerodynamicLoads(), ivc)
    lift_array = problem.get_val("data:loads:aerodynamic:ultimate:force_distribution", units="N/m")
    lift_result = np.array(
        [
            6257.1,
            6257.1,
            6256.9,
            6258.7,
            6256.0,
            6250.9,
            6248.4,
            6837.1,
            6968.4,
            6971.4,
            7005.5,
            7041.7,
            7094.2,
            7146.7,
            7151.2,
            7337.9,
            8279.8,
            11151.1,
            18189.2,
            33070.4,
            32166.4,
            31129.4,
            30287.1,
            30280.7,
            30207.0,
            30133.3,
            30100.8,
            30059.1,
            29984.6,
            29978.2,
            29059.8,
            27990.8,
            26938.2,
            25884.6,
            24835.9,
            23773.9,
            22716.8,
            21654.0,
            20592.6,
            19519.5,
            18456.4,
            17379.7,
            16312.5,
            15240.5,
            14170.7,
            13083.4,
            11998.2,
            10898.7,
            9783.9,
            8601.8,
            7382.8,
            6067.2,
            4595.8,
            2814.8,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(lift_array - lift_result)) <= 1e-1
