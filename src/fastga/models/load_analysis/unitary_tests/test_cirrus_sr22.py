"""
Test load_analysis module.
"""
#  This file is part of FAST-OAD_CS23 : A framework for rapid Overall Aircraft Design
#  Copyright (C) 2022  ONERA & ISAE-SUPAERO
#  FAST is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import numpy as np
import pytest

from ..wing.aerostructural_loads import AerostructuralLoad
from ..wing.structural_loads import StructuralLoads
from ..wing.aerodynamic_loads import AerodynamicLoads
from ..wing.loads import WingLoads

from tests.testing_utilities import run_system, get_indep_var_comp, list_inputs

XML_FILE = "cirrus_sr22.xml"


def test_compute_shear_stress():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerostructuralLoad()), __file__, XML_FILE)
    cl_vector_only_prop = [
        1.53,
        1.53,
        1.53,
        1.52,
        1.52,
        1.52,
        1.52,
        1.51,
        1.53,
        1.55,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.64,
        1.65,
        1.65,
        1.65,
        1.65,
        1.66,
        1.65,
        1.65,
        1.65,
        1.65,
        1.63,
        1.63,
        1.62,
        1.61,
        1.58,
        1.55,
        1.49,
        1.43,
        1.31,
        1.14,
        0.94,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        0.05,
        0.14,
        0.23,
        0.32,
        0.41,
        0.5,
        0.59,
        0.72,
        0.88,
        1.04,
        1.21,
        1.37,
        1.54,
        1.7,
        1.87,
        2.04,
        2.2,
        2.37,
        2.54,
        2.7,
        2.87,
        3.04,
        3.2,
        3.37,
        3.53,
        3.7,
        3.86,
        4.02,
        4.18,
        4.35,
        4.5,
        4.66,
        4.82,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.311, units="m/s")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerostructuralLoad(), ivc)
    shear_max_mass_condition = problem.get_val("data:loads:max_shear:mass", units="kg")
    assert shear_max_mass_condition == pytest.approx(1426.3, abs=1e-1)
    shear_max_lf_condition = problem.get_val("data:loads:max_shear:load_factor")
    assert shear_max_lf_condition == pytest.approx(4.28, abs=1e-2)
    lift_shear_diagram = problem.get_val("data:loads:max_shear:lift_shear", units="N")
    lift_root_shear = lift_shear_diagram[0]
    assert lift_root_shear == pytest.approx(97568, abs=1)
    weight_shear_diagram = problem.get_val("data:loads:max_shear:weight_shear", units="N")
    weight_root_shear = weight_shear_diagram[0]
    assert weight_root_shear == pytest.approx(-6004.87, abs=1)


def test_compute_root_bending_moment():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerostructuralLoad()), __file__, XML_FILE)
    cl_vector_only_prop = [
        1.53,
        1.53,
        1.53,
        1.52,
        1.52,
        1.52,
        1.52,
        1.51,
        1.53,
        1.55,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.64,
        1.65,
        1.65,
        1.65,
        1.65,
        1.66,
        1.65,
        1.65,
        1.65,
        1.65,
        1.63,
        1.63,
        1.62,
        1.61,
        1.58,
        1.55,
        1.49,
        1.43,
        1.31,
        1.14,
        0.94,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        0.05,
        0.14,
        0.23,
        0.32,
        0.41,
        0.5,
        0.59,
        0.72,
        0.88,
        1.04,
        1.21,
        1.37,
        1.54,
        1.7,
        1.87,
        2.04,
        2.2,
        2.37,
        2.54,
        2.7,
        2.87,
        3.04,
        3.2,
        3.37,
        3.53,
        3.7,
        3.86,
        4.02,
        4.18,
        4.35,
        4.5,
        4.66,
        4.82,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.311, units="m/s")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerostructuralLoad(), ivc)
    max_rbm_mass_condition = problem.get_val("data:loads:max_rbm:mass", units="kg")
    assert max_rbm_mass_condition == pytest.approx(1426.3, abs=1e-1)
    max_rbm_lf_condition = problem.get_val("data:loads:max_rbm:load_factor")
    assert max_rbm_lf_condition == pytest.approx(4.28, abs=1e-2)
    lift_rbm_diagram = problem.get_val("data:loads:max_rbm:lift_rbm", units="N*m")
    lift_rbm = lift_rbm_diagram[0]
    assert lift_rbm == pytest.approx(246892, abs=1)
    weight_rbm_diagram = problem.get_val("data:loads:max_rbm:weight_rbm", units="N*m")
    weight_rbm = weight_rbm_diagram[0]
    assert weight_rbm == pytest.approx(-13190, abs=1)


def test_compute_mass_distribution():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:point_mass", units="N/m"
    )
    point_mass_result = np.array(
        [
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -16427.4,
            -16427.4,
            -16427.4,
            -16427.4,
            -16427.4,
            -16427.4,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:wing", units="N/m"
    )
    wing_mass_result = np.array(
        [
            -659.1,
            -652.1,
            -652.1,
            -652.1,
            -652.1,
            -652.1,
            -652.1,
            -652.1,
            -647.9,
            -647.9,
            -647.4,
            -647.0,
            -647.0,
            -646.3,
            -645.5,
            -645.5,
            -636.7,
            -626.4,
            -616.0,
            -605.6,
            -595.2,
            -584.7,
            -574.2,
            -563.7,
            -553.1,
            -542.6,
            -532.1,
            -521.5,
            -511.0,
            -500.5,
            -490.0,
            -479.5,
            -469.1,
            -458.8,
            -448.5,
            -438.2,
            -428.0,
            -417.9,
            -407.8,
            -397.8,
            -387.9,
            -378.1,
            -368.4,
            -358.8,
            -349.3,
            -339.9,
            -330.6,
            -329.5,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val(
        "data:loads:structure:ultimate:force_distribution:fuel", units="N/m"
    )
    fuel_mass_result = np.array(
        [
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -1993.20417463,
            -1936.5389041,
            -1936.01242731,
            -1929.91210698,
            -1923.82430044,
            -1923.41633906,
            -1917.74899529,
            -1911.68617912,
            -1911.16410607,
            -1841.08419102,
            -1760.6379365,
            -1682.1225174,
            -1605.58275114,
            -1531.06782673,
            -1458.60456502,
            -1388.22933923,
            -1319.9574417,
            -1253.81309445,
            -1189.80517455,
            -1127.94605586,
            -1068.23380464,
            -1010.66982084,
            -955.23840566,
            -901.93134336,
            -850.72820411,
            -801.60826024,
            -754.54344991,
            -709.50244697,
            -666.45394004,
            -625.36039295,
            -586.17889537,
            -548.86466251,
            -513.37639753,
            -479.66301687,
            -447.67259775,
            -417.35479847,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            -0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_structure_shear():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val("data:loads:structure:ultimate:shear:point_mass", units="N")
    point_mass_result = np.array(
        [
            -778.7,
            -778.7,
            -778.7,
            -778.7,
            -778.7,
            -778.7,
            -778.7,
            -778.7,
            -778.7,
            -770.4,
            -579.9,
            -389.3,
            -376.5,
            -198.8,
            -8.2,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val("data:loads:structure:ultimate:shear:wing", units="N")
    wing_mass_result = np.array(
        [
            -2956.2,
            -2921.8,
            -2853.5,
            -2785.2,
            -2716.9,
            -2648.5,
            -2580.2,
            -2511.9,
            -2442.6,
            -2442.0,
            -2434.5,
            -2427.0,
            -2426.4,
            -2419.4,
            -2412.0,
            -2411.3,
            -2324.2,
            -2223.0,
            -2123.0,
            -2024.2,
            -1926.8,
            -1830.7,
            -1736.1,
            -1643.1,
            -1551.6,
            -1461.9,
            -1373.8,
            -1287.5,
            -1203.1,
            -1120.5,
            -1039.8,
            -961.1,
            -884.4,
            -809.6,
            -736.9,
            -666.2,
            -597.6,
            -531.0,
            -466.5,
            -404.1,
            -343.7,
            -285.4,
            -229.1,
            -174.8,
            -122.5,
            -72.2,
            -23.8,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val("data:loads:structure:ultimate:shear:fuel", units="N")
    fuel_mass_result = np.array(
        [
            -4948.04466723,
            -4948.04466723,
            -4948.04466723,
            -4948.04466723,
            -4948.04466723,
            -4948.04466723,
            -4948.04466723,
            -4843.62998199,
            -4634.14788825,
            -4632.21161258,
            -4609.78928509,
            -4587.43764863,
            -4585.94068544,
            -4565.15656038,
            -4542.94587085,
            -4541.03444571,
            -4286.10850923,
            -3997.63094549,
            -3720.49586564,
            -3454.66718013,
            -3200.11169342,
            -2956.70858677,
            -2724.36015455,
            -2502.89041264,
            -2292.14584132,
            -2091.91746519,
            -1902.00254639,
            -1722.15039744,
            -1552.11811871,
            -1391.61102693,
            -1240.35667961,
            -1098.04851899,
            -964.38152703,
            -839.03379225,
            -721.67914899,
            -611.99641076,
            -509.65403333,
            -414.31397813,
            -325.64149173,
            -243.31795144,
            -167.01022162,
            -96.3929291,
            -31.15384266,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_structure_bending():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(StructuralLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.0)
    ivc.add_output("data:loads:max_rbm:load_factor", 4.0)

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(StructuralLoads(), ivc)
    point_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:point_mass", units="N*m"
    )
    point_mass_result = np.array(
        [
            -632.1,
            -591.3,
            -509.7,
            -428.2,
            -346.6,
            -265.0,
            -183.4,
            -101.9,
            -18.8,
            -18.1,
            -10.2,
            -4.6,
            -4.3,
            -1.2,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(point_mass_array - point_mass_result)) <= 1e-1
    wing_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:wing", units="N*m"
    )
    wing_mass_result = np.array(
        [
            -7571.3,
            -7417.3,
            -7114.8,
            -6819.4,
            -6531.2,
            -6250.1,
            -5976.2,
            -5709.5,
            -5445.4,
            -5442.9,
            -5414.6,
            -5386.5,
            -5384.6,
            -5358.3,
            -5330.3,
            -5327.9,
            -5006.2,
            -4642.1,
            -4292.3,
            -3957.0,
            -3636.5,
            -3330.6,
            -3039.6,
            -2763.3,
            -2501.8,
            -2254.9,
            -2022.6,
            -1804.8,
            -1601.1,
            -1411.5,
            -1235.6,
            -1073.2,
            -924.0,
            -787.6,
            -663.7,
            -552.0,
            -451.9,
            -363.1,
            -285.3,
            -217.9,
            -160.5,
            -112.6,
            -73.9,
            -43.8,
            -21.9,
            -7.7,
            -0.9,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(wing_mass_result - wing_mass_array)) <= 1e-1
    fuel_mass_array = problem.get_val(
        "data:loads:structure:ultimate:root_bending:fuel", units="N*m"
    )
    fuel_mass_result = np.array(
        [
            -11640.66448384,
            -11381.45946458,
            -10863.04942607,
            -10344.69644347,
            -9826.28640495,
            -9307.87636644,
            -8789.52338384,
            -8271.11334532,
            -7766.04419921,
            -7761.41101959,
            -7707.80770282,
            -7654.46407422,
            -7650.89470833,
            -7601.379289,
            -7548.55258087,
            -7544.01059084,
            -6944.62223647,
            -6281.6576469,
            -5660.87321127,
            -5081.22300431,
            -4541.64390025,
            -4040.86889438,
            -3577.66910731,
            -3150.65227535,
            -2758.47027957,
            -2399.67294318,
            -2072.82924903,
            -1776.43630551,
            -1509.02092502,
            -1269.04889131,
            -1055.04589819,
            -865.51536353,
            -698.99499199,
            -554.03558819,
            -429.22173141,
            -323.18290221,
            -234.57946604,
            -162.11198774,
            -104.53252019,
            -60.65138999,
            -29.31977687,
            -9.4469426,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(fuel_mass_result - fuel_mass_array)) <= 1e-1


def test_compute_lift_distribution():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(AerodynamicLoads()), __file__, XML_FILE)
    ivc.add_output("data:loads:max_shear:load_factor", 4.28)
    ivc.add_output("data:loads:max_shear:mass", 1426.3, units="kg")
    ivc.add_output("data:loads:max_rbm:load_factor", 4.28)
    ivc.add_output("data:loads:max_rbm:mass", 1426.3, units="kg")
    cl_vector_only_prop = [
        1.53,
        1.53,
        1.53,
        1.52,
        1.52,
        1.52,
        1.52,
        1.51,
        1.53,
        1.55,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.64,
        1.65,
        1.65,
        1.65,
        1.65,
        1.66,
        1.65,
        1.65,
        1.65,
        1.65,
        1.63,
        1.63,
        1.62,
        1.61,
        1.58,
        1.55,
        1.49,
        1.43,
        1.31,
        1.14,
        0.94,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        0.05,
        0.14,
        0.23,
        0.32,
        0.41,
        0.5,
        0.59,
        0.72,
        0.88,
        1.04,
        1.21,
        1.37,
        1.54,
        1.7,
        1.87,
        2.04,
        2.2,
        2.37,
        2.54,
        2.7,
        2.87,
        3.04,
        3.2,
        3.37,
        3.53,
        3.7,
        3.86,
        4.02,
        4.18,
        4.35,
        4.5,
        4.66,
        4.82,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.311, units="m/s")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(AerodynamicLoads(), ivc)
    lift_array = problem.get_val("data:loads:aerodynamic:ultimate:force_distribution", units="N/m")
    lift_result = np.array(
        [
            14085.6,
            13935.7,
            13936.8,
            13934.5,
            13901.7,
            13898.9,
            13887.0,
            13838.0,
            13769.3,
            13769.1,
            13765.6,
            13762.2,
            13762.0,
            13755.2,
            13747.9,
            13747.2,
            13660.2,
            13591.1,
            13477.0,
            13327.9,
            13153.7,
            12990.0,
            12830.3,
            12663.4,
            12491.7,
            12299.9,
            12085.6,
            11886.0,
            11645.6,
            11419.1,
            11197.3,
            10980.4,
            10711.3,
            10475.8,
            10229.3,
            9975.2,
            9687.5,
            9447.7,
            9169.0,
            8888.8,
            8558.5,
            8194.5,
            7728.1,
            7222.4,
            6520.7,
            5584.2,
            4399.8,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
        ]
    )
    assert np.max(np.abs(lift_array - lift_result)) <= 1e-1


def test_load_group():
    # Research independent input value in .xml file
    ivc = get_indep_var_comp(list_inputs(WingLoads()), __file__, XML_FILE)
    cl_vector_only_prop = [
        1.53,
        1.53,
        1.53,
        1.52,
        1.52,
        1.52,
        1.52,
        1.51,
        1.53,
        1.55,
        1.57,
        1.58,
        1.59,
        1.6,
        1.61,
        1.62,
        1.63,
        1.64,
        1.64,
        1.65,
        1.65,
        1.65,
        1.65,
        1.66,
        1.65,
        1.65,
        1.65,
        1.65,
        1.63,
        1.63,
        1.62,
        1.61,
        1.58,
        1.55,
        1.49,
        1.43,
        1.31,
        1.14,
        0.94,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    y_vector = [
        0.05,
        0.14,
        0.23,
        0.32,
        0.41,
        0.5,
        0.59,
        0.72,
        0.88,
        1.04,
        1.21,
        1.37,
        1.54,
        1.7,
        1.87,
        2.04,
        2.2,
        2.37,
        2.54,
        2.7,
        2.87,
        3.04,
        3.2,
        3.37,
        3.53,
        3.7,
        3.86,
        4.02,
        4.18,
        4.35,
        4.5,
        4.66,
        4.82,
        4.97,
        5.13,
        5.28,
        5.43,
        5.58,
        5.73,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
    ivc.add_output(
        "data:aerodynamics:slipstream:wing:cruise:only_prop:CL_vector", cl_vector_only_prop
    )
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:Y_vector", y_vector, units="m")
    ivc.add_output("data:aerodynamics:slipstream:wing:cruise:prop_on:velocity", 82.311, units="m/s")

    # Run problem and check obtained value(s) is/(are) correct
    problem = run_system(WingLoads(), ivc)

    lift_shear_diagram = problem.get_val("data:loads:max_shear:lift_shear", units="N")
    lift_root_shear = lift_shear_diagram[0]
    assert lift_root_shear == pytest.approx(97568, abs=1)
